애플리케이션 배포란 무엇인지 서술 하시오.

참조
https://yunamom.tistory.com/287
https://dev-luna-archive.tistory.com/4#google_vignette


애플리케이션 배포란 애플리케이션 배포 환경을 구성하고, 
구현이 된 애플리케이션의 소스 검증 및 빌드를 수행하여, 
운영환경에 배포하는 것을 말합니다.
쉽게 말하면 코딩해서 서버에 올리기까지의 과정을 말합니다!


컴파일 언어(C, C++ 등)
기계어로 바로 변환되어 실행되기 때문에 가장 속도가 빠르고 보안에 유리
빌드과정이 오래 걸림
전처리기 → 파싱 → 번역 → 어셈블리 → 링킹 → 로더 진행

Byte Code 언어(Java, C# 등)
'class'라는 바이트 코드 파일로 생성되고 JRE, CLI에서 한 줄씩 실행하는 방식으로 빌드
JRE, CLI 환경에서 실행될 때 기계어로 변환
컴파일 언어보다 빌드 과정이 빠름

인터프리터 언어(JavaScript, Python, Ruby 등)
한 줄씩 번역되어 실행
컴파일하는 과정에서 메모리가 적게 소모되고 빠른 시간에 컴파일 진행


애플리케이션 배포 환경
웹서버(Web Server)

사용자의 http 요청을 받아 웹 컴테이터에 요청을 전달하고 결과값을 받아와 사용자에게 전송하는 역할을 함

정적인 리소스 배포, 정적 리소를 빠르고 안정적으로 처리

WAS(Web Applicaiton Server)

동적인 처리를 수행하는 프로그램 실행 부분을 배포

UI 배포 영역(JSP, Servlet 등)과 Biz. 배포 영역(EJB, POJO 서비스 등)으로 구분


애플리케이션 배포 단위
jar(Java Archive) : 자바 라이브러리, 리소스, property 파일들을 포함
war(Web Archive) : 웹 컨테이너에 배포되는 형식, Servlet, jar 파일과 WEB-INF 폴덜에 있는 web.xml 파일로 구성
ear(Enterprise Archive) : jar와 war를 묶어서 하나의 완성된 웹 애플리케이션 서비스를 제공


형상관리 시스템
서비스 제공 대상 형상항목을 식별하여 기준선을 설정하고, 형상 항목 변경과정에서 점검, 검증 등의 체계적인 통제를 통해 형상항목 간의 일관성과 추적성을 확보하기 위한 시스템
형상관리 : 소프트웨어의 전체 생명 주기, 계획부터 개발, 운영, 유지 보수, 폐기까지 발생하는 모든 활동을 지속적으로 관리하는 것을 의미
형상항목 : 형상관리 대상이 되는 항목을 의미
기준선 : 공식적으로 검토하고 협의되어 기준이 되는 형상항목의 집합체를 의미
마이그네이션 : 개발 완료된 시스템이 운영 단계로 전환될 때 관련 소스 파일을 저장 공간으로 이관시키는 작업
리포지터리 : 관리 대상을 형상관리 시스템으로 일괄 전송하여 압축, 암호화한 후에 저장, 관리하는 저장 공간을 의미, 업무 또는 디렉터리 단위로 구성
워크플로 : 형상관리 활동을 수행하기 위해 미리 정해진 절차가 형상관리 시스템 안에 구현되어 있는 것을 의미
반출 : 형상항목을 변경하기 위해 형상 리포지터리로 부터 전송받는 것을 의미, 잠금 상태 유지
반입 : 반출된 형상항목을 변경 후 다시 형상리포지터리로 전송하는 것을 의미, 버전관리 자동적으로 이루어짐


배포관계자들의 역활과 책임

배포관리자
빌드, 배포환경 구성 및 운영
빌드 스크립트 작성 밑 테스트
빌드, 배포 내역 오류 확인
배포 요청 내역 검토 및 오류 확인
주기적 통합 빌드 및 배포 수행

프로젝트 PM, PL
빌드, 배포 보고서 확인
개발 진척도 관리
테스트 케이스 작성 내역 검토

개발자
테스테 케이스 작성 및 관리
개별 모듈 수시 빌드 및 배포
빌드, 배포 내역 정상 여부 확인
빌드, 배포 보고서 내 테스트 오류 내역, 소스코드 품질 수정 내역 확인 후 오류 수정


소스코드 검증 도구

정적 테스트 도구
테스트하기 전에 코딩 오류, 성능 저하, 보안 취약점 등 결함을 조기에 발견할 수 있도록 지원
생산성 향상, 품질 향상
정량적임 품질 관리시스템을 구축

동적 테스트 도구
분기(결정)문 등 특정 유형의 코드 구조가 충분히 테스트 되었는지를 확인하여 추가적인 테스트를 진행
안정성 제고, 소스 품질 관리(통제) 활동을 할 수 잇는 정략적인 품질 관리시스템을 구축


코드 인스펙션

정적 테스트의 가장 일반적인 유형
사전에 정의된 코드 작성 규칙기반으로 소스코드를 점검하여 작성 규칙에 위반되는 소스코드를 추출하는 분석 도구로 에플리케이션 개발 시 대부분 사용
빌드 도구와 연계해 빌드 배포 수행 시 자동적으로 점검
코드 인스펙션 Rule 유형
성능 개선 : 성능에 영향을 미칠 수 있는 코드를 점검하는 Rule임, 메모리 누수, 미사용 변수, 메소드 여부 등을 확인하여 메모리를 낭비하는 코드를 식별함
코드 작성 규칙 : 개발언어에서 사전에 정의된 작성 규칙 또는 프로젝트 내에서 정의된 프로그램 명명 규칙의 준수 여부를 점검하는 Rule 임, 가독성 향상
에러 발생 가능성 : 에러 발생 가능성이 있는 코드를 점검하는 Rule임
코드 작성 Rule 심각도 구분
필수, Blocker : 에러 발생 가능성이 매우 높거나 메모리 누수가 발생되는 코드, 반드시 수정되어야하는 위반 사항
권고 상, Critical : 에러 발생 가능성이 높거나 일반적으로 수정되어야 하는 심각한 위반 사항을 말함
권고 중, Major : 에러 발생이 있거나 수정을 권고하는 중요 위반 사항
권고 하, Minor : 소스코드의 가독성, 유지, 보수성 향상을 위해 수정을 권고하는 위반 사항
정보, info : 정보성으로 제공되는 위반 사항
정규 표현식 : 특정한 규칙을 가진 문자열의 집합을 표현하는 범용적인 방식, 코드 익스펜션 도구의 코드 작성 규칙은 일방적으로 정규식으로 표현
테스트 프레임 워크(동적 분석 도구)의 구성
테스트 케이스를 별도의 테스트 코드로 작성하고 동작시킬 수 있는 환경을 제공하는 도구
Junit 테스트 프레임워크 : Java기반


지속적인 통합(CI) 환경

빌드 도구
애플리케이션의 배포 단위, 형식에 따라 소스코드를 컴파일, 패키징하며 배포하는 스크립트를 제공하고 수행하는 도구
Ant, Maven 등

테스트 도구
개발된 소스코드를 테스트할 수 있는 테스트 코드를 작성, 동작시킬 수 잇는 도구로, 통합 빌드 수행시 연결 할 수 있음
Junit, DBUnit, StrutsTestCare 등

소스코드 품질 측정도구(코드 인스펙션)
정해진 소스코드 작성 규칙에 따라 소스코드를 점검하고 규칙 위반 여부를 체크하는 도구로 통합 빌드 수행 시 연결 할 수 있음
PMD, FindBugs 등

테스트 커버리지 측정도구
소스코드 내 테스트 가능한 경로 중 테스트 도구를 통해서 테스트된 커버리리즈를 측정하는 도구
Clover, JCoverage, ElecEmma 등

빌드 스케줄 관리도구
작성된 빌드 스크립트를 정해진 조건, 시간에 기동하고 진행 상태, 수행 결과를 관리하는 도구
Anthil, CruiseControl, Hudson 등


테스트 커버리지

전체 프로그램의 범위 대비 테스트 수행 시 해당 테스트 수행을 위해 동작된 프로그램의 비율을 의미
라인커버리지(구문 커버리지)
분기커버리지
조건커버리지


빌드 스케줄 관리 도구 기능
빌드 작업 스케줄링
빌드 작업 상태 및 이력 관리
빌드 도구 연계 관리
빌드 수행 결과 리포팅