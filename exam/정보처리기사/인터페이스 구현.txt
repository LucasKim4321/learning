
제 2과목 소프트웨어 개발 > 인터페이스 구현

참조 : https://simuing.tistory.com/entry/2021-%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC-%ED%95%84%EA%B8%B0%EC%9A%94%EC%95%BD-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84

(1) 내·외부 인터페이스 기술 표준 확인
대표적인 방법은 EAI와 ESB 방식이 있다.

EAI(Enterprise Application Integration) [2020년 4회]
기업 내 각종 플랫폼 및 애플리케이션들을 통합하여, 동일한 플랫폼을 통해 서로 커뮤니션하도록 하는 것을 목적으로 한다.
기업이 비즈니스 프로세스를 중심으로 여러 애플리케이션 간의 네트워크를 통합 관리한다.
대상 시스템에 비표준 어댑터(Adapter)를 배포하여 통합한다.
Hub & Spoke와 Message Bus의 혼합방식이다.
필요한 경우 한 가지의 EAI 구현이 가능하다.
데이터 병목 현상을 최소화할 수 있다.
EAI 구축 유형 (포허 메하) [2020년 3회] [2021년 2회] [2022년 3회]
포인트 투 포인트
(Point-to-point)	가장 기본적인 애플리케이션 통합 방식으로, 애플리케이션을 1:1로 연결하며 변경 및 재사용이 어려움
허브 앤 스포크
(Hub & Spoke)	단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식으로, 확장 및 유지 보수가 용이하지만 허브 장애 발생 시 시스템 전체에 영향을 미침
메시지 버스
(Message Bus, ESB 방식)	애플리케이션 사이에 미들웨어를 두어 처리하는 방식으로, 확장성이 뛰어나며 대용량 처리가 가능함
하이브리드
(Hybrid)	Hub & Spoke와 Message Bus의 혼합 방식으로, 그룹 내에서는 Hub & Spoke방식을, 그룹 간에는 Message Bus 방식을 사용함
ESB(Enterprise Service Bus)
기업에서 운영되는 서로 다른 플랫폼(이기종) 및 애플리케이션간을 연계해서 관리 운영할 수 있도록 서비스 중심의 통합을 지향하는 기술이다.
개방형 표준인 Web Service를 이용한다.
ESB는 버스를 중심으로 각각 프로토콜이 호환 가능하도록 애플리케이션의 통합을 낮은 결합 방식으로 지원하는 방식이다.
EAI와 ESB의 세부 기술 및 토폴로지 (허어브메)
→ 허어브(허브)차를 메(매)일 마시다
허브 앤 스포크(Hub & Spoke)
어댑터(Adaptor)
브로커(Broker)
메시지 큐(Message Queue)
인터페이스 보안 구현
구분	설명
시큐어 코딩 가이드 적용	인터페이스 보안 취약점 방지
데이터베이스 보안 적용	데이터베이스 기밀성 유지
중요 인터페이스 데이터의 암호화 전송	IPSec, SSL/TLS, S-HTTP 등 보안 채널을 활용하여 암·복호화 과정을 거쳐 전송
[2020년 2월]
시큐어 코딩 가이드 적용 대상 (입보시 에코캡아)
입력데이터 검증 및 표현
보안 기능
시간 및 상태
에러 처리
코드 오류
캡슐화
API 오용
데이터베이스 암호화 알고리즘 유형 (대비해)
대칭 키 암호화 알고리즘
비대칭 키 암호화 알고리즘
해시 암호화 알고리즘
데이터베이스 암호화 기법 유형 (애플하)
API 방식
Plug-in 방식
Hybrid 방식
(2) 인터페이스 구현 기술
구분	설명
JSON	비동기 브라우저/서버 통신(AJAX)을 위해 "속성-값 쌍", "키-값 쌍"으로 이루어진 데이터 오브젝트를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷이다.
REST	웹과 같은 분산 하이퍼 미디어 환경에서 자원의 존재/상태 정보를 표준화된 HTTP 메서드로 주고받는 웹 아키텍처이다.
AJAX	Asynchronous Java Script and XML 약어
javascript를 사용한 비동기 통신기술로 클라이언트와 서버 간에 XML 데이터를 주고받는 기술 [2020년 3회]

(3) 인터페이스 구현 검증
인터페이스 구현 검증 도구 (엑스피 엔셀웨) [2020년 3회]
검증 도구	설명
xUnit	java(Junit), C++(Cppunit), .Net(Nunit) 등 다양한 언어를 지원하는 단위 테스트 프레임워크
STAF	서비스 호출, 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크
FitNesse	웹 기반 테스트 케이스 설계/실행/결과 확인 등을 지원하는 테스트 프레임워크
NTAF	FitNesse와 STAF의 장점을 결합하여 개발된 테스트 자동화 프레임워크
Selenium	다양한 브라우저 지원 및 개발언어를 지원하는 웹 애플리케이션 테스트 프레임워크
watir	Rudy 기반 웹 애플리케이션 테스트 프레임워크





인터페이스 구현 개요
인터페이스 구현은 시스템 간의 상호작용을 설계하고 구현하는 과정입니다. 이 과정에서 내부 시스템과 외부 시스템이 원활하게 통신할 수 있도록 기술 표준, 보안, 데이터 형식, 검증 등을 고려합니다.

주요 내용
내·외부 인터페이스 기술 표준 확인

EAI(Enterprise Application Integration): 기업 내의 다양한 애플리케이션과 플랫폼을 통합해, 동일한 플랫폼에서 통신하도록 하는 방식입니다. 대표적인 구축 유형으로는 포인트 투 포인트, 허브 앤 스포크, 메시지 버스, 하이브리드 방식이 있습니다.
ESB(Enterprise Service Bus): 서비스 중심의 통합 방식으로, 이기종 시스템 간의 연계 및 통합을 관리합니다. 웹 서비스와 같은 개방형 표준을 사용해 낮은 결합도를 유지하면서 통합을 지원합니다.
인터페이스 보안 구현

시큐어 코딩 가이드: 입력 데이터 검증, 보안 기능, 에러 처리 등 보안 취약점을 방지하는 코딩 가이드라인을 적용합니다.
데이터 암호화: 데이터베이스 보안을 위해 대칭/비대칭 키 암호화와 해시 암호화를 사용합니다. 암호화 기법으로는 API 방식, Plug-in 방식, Hybrid 방식이 있습니다.
인터페이스 구현 기술

JSON: 속성-값 쌍으로 데이터를 표현하는 개방형 표준 포맷으로, 주로 AJAX와 같은 비동기 통신에서 사용됩니다.
REST: HTTP 메서드를 사용해 분산 환경에서 자원의 상태 정보를 주고받는 웹 아키텍처입니다.
AJAX: 클라이언트와 서버 간에 비동기적으로 데이터를 주고받는 기술로, 웹 애플리케이션의 사용자 경험을 향상시킵니다.
인터페이스 구현 검증

검증 도구: 인터페이스의 구현이 제대로 되었는지 확인하기 위해 다양한 테스트 프레임워크를 사용합니다. 대표적으로 xUnit, STAF, Selenium 등이 있습니다.
요약
인터페이스 구현은 시스템 간의 원활한 통신을 보장하기 위해 기술 표준을 확인하고, 보안, 데이터 형식, 검증을 고려하여 구현하는 과정입니다. 이 과정에서 EAI, ESB와 같은 통합 방식과 JSON, REST 등의 기술이 사용됩니다. 또한, 시큐어 코딩과 암호화를 통해 보안을 강화하며, 다양한 테스트 프레임워크를 사용해 검증합니다.