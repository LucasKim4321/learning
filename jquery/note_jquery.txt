ex01_selector01.html

// $() jquery에서만 쓰는 객체

$(document).ready(function(){})  // DOM객체(document)가 정상적으로 로딩이되면 처리
$(function(){  // $(function(){내용}) 내용에 있는 juqery만 읽기 가능
    console.log('jqeury ok...')

    // 태그 선택자
    // $('h1') // const h1 = document.querySelector('h1') 이거랑 같음
    $('h1').css('color','lightcoral')  // css속성 한개 선택
    $('#title').css({
        // '스타일시트에서 사용하는 속성이름':'속성값'
        'border': '1px solid blue',
        'background-color': 'skyblue',
        // js 스타일 속성 이름
        border: '1px solid black'
    })
    $('.ti').css('background-color','lightcoral').css('border','2px dashed green')
    $('h2,h3').css('font-size','24px')
    $('.box1 h1').css({border:'1px solid skyblue', 'border-radius':'10px',padding:'5px 10px'})
    
    // 자식 요소
    $('.box2 > h1').css('color','red')
    $('.box2').children('h1').css('color','blue')
    const el = $('.box2')
    el.children('h1').css('color','gray')
    el.find('>h1').css('color','lightblue')
    el.children().css('border','1px solid gray')

    // 동위 선택자(형제요소선택자) '+'  next()랑 같음
    $('.box2 > .txt+p').css('color','green')
    var style_1 = {
        'background-color':'lightblue',
        'border':'2px solid lightcoral'
    }

    // 공통된 부모 요소를 가지는 요소들만 적용
    // $('.txt').next().next().next().css(style_1)  // next() 지정한 요소의 다음요소
    // $('.txt').prev().css(style_1)  // prev() 지정한 요소의 이전요소
    // $('.txt').nextAll().css(style_1)  // nextAll() 지정한 요소의 다음 요소 전부
    // $('.txt').prevAll().css(style_1)  // prevAll() 지정한 요소의 이전 요소 전부
    // $('.txt').siblings().css(style_1)  // siblings() 자기 자신을 제외한 모든 형제 요소

    // 상위 요소 선택자
    // $('#sec').parents('div').css(style_1) // parents('상위요소') 선택한 요소의 상위요소 
    // $('#sec').parents().css(style_1)  // parents() 모든 상위 요소
    // $('#sec > h1').closest('div').css(style_1) // closest('상위요소') 가장 가까운 상위요소
    
})


ex01_selector02.html

// 요소 선택
// $('#menu li:first')  // 첫번째
// $('#menu li:last')  // 마지막
// $('#menu li').last()  //마지막
// $('#menu li:odd')  // 홀수(인덱스 번호 기준)
// $('#menu li:even')  // 짝수
// $('#menu li').eq(3)  // 인덱스번호
// $('#menu li:lt(4)')  // 인덱스번호보다 작은 것들
// $('#menu li:gt(2)')  // 인덱스번호보다 큰 것들
// $('#menu li:nth-child(3)')  // 몇 번째 자식요소(인덱스번호x)
// $('#menu li:nth-child(2n)')  // 짝수
// $('#menu li:nth-child(2n+1)')  // 홀수
// $('li:last')  // li중 맨 마지막
// $('#menu li:first-of-type')  // 첫번째
// $('#menu li').slice(2,4)  // 인덱스번호2번부터 4번 전까지


// 배열.forEach( ()=> {})
// $.each(배열, 수행할 내용)

$.each( $('#menu li'), function(i,o) {  // i index o object
    // console.log(i,o)
    console.log(i, $(this))  // this 자기자신 객체
})

// $.map(배열, 수행할 함수) : 반복수행하고 새열에 저장하고 반환
// $.grep(배열, 수행할 함수): 반복 수행하고 인덱스 오름차순으로 배열의 데이터 불러옴
const info = [{"area":"부산","name":"홍길순"},{"area":"서울","name":"홍길동"},{"area":"인천","name":"동길이"},{"area":"김해","name":"동길순"}]

console.log('------map')
const info2 = $.map(info,(a,b)=>{  // a데이터 b인덱스번호
    console.log(a,b)
    if (a.area == '서울') return a
})
console.log('area:', info2)

    console.log('------grep')
const info3 = $.grep(info,(a,b)=>{
    console.log(a,b)
    if (a.area == '서울') return true
    else return false
})
console.log('area:', info3)

// 선택자의 인덱스 추출
const idx = $('#menu li').index($('#item'))  // 대상배열.index(추출할 요소)


ex01_selector03.html

// $('.box2 a[target]')  // target이 포함된 a태그
// $('.box2 a[href^=https]')  // href속성이 https로 시작하는
// $('.box2 a[href$=net]')  // net으로 끝나는
// $('#member_f :text')  // 폼 요소 중에 타입이 text인것
// $('input[type=text]')  // 인풋 요소 중에 타입이 text인것
// $('#member_f :password')  // 폼 요소 중에 타입이 password인것

$('.zone1 :selected').val()  // x.value(e.target.value)  value값을 불러옴

대싱.on('기능',함수) // addEventListener('기능',함수)기능


ex01_selector04.html

// 요소 중 '내용1' 텍스트를 포함하는 요소
// $('.inner_1 p:contains(내용1)')

// 하위 요소 중 가장 가까운 요소
// $('.inner_1').contents()
// $('.inner_1 p:has(strong)')

// 특정 요소를 제외한 나머지 요소
// $('.inner_2 p').not(':first')
// $('.inner_2 p').not(':nth-child(2)')

// :nth-child(위치), .eq(index번호)
// $('.inner_2 p').eq(2)

// end() 인덱스를 선택하기 전의 선택자 적용 ??
// $('.inner_2 p').eq(2).end()

// find(): 수직방향(하위요소), filter(): 형제선택자(수평방향)
// $('.inner_1 .txt1')
// var inner_1 = $('.inner_1')
// inner_1.find('.txt1')

// 1. 형제 노드 탐색
// $('.inner_2 p').filter(':nth-child(2)')
var inner_2 = $('.inner_2 p')
// inner_2.filter(':nth-child(2)')

// 특정 조건의 요소만 스타일 적용
inner_2.filter( function(idx,obj) {
    console.log(idx,obj)
    return idx%2 == 0  // true인 객체만 반환
}).css('color','green')

// 배열.map()  배열.
let rs1 = $('.inner_2 p').eq(2).is(':visible')
console.log(':visible',rs1)
let rs2 = $('.inner_2 p').eq(3).is(':visible')
console.log(':visible',rs2)
var rs3 = $('#chk1').is(':checked')
console.log(':checked',rs3)
var rs4 = $('#chk2').is(':checked')
console.log(':checked',rs4)

//*체크
let name = $('.name').html()
let age = $('.age').text()
console.log(name)
console.log(age)
$('.name').html('<b>홍길동</b>')
$('.age').text('<b>10</b>')

//xxx.getAttribute('class'), xxx.getAtttribute('class','b')
var attr = $('.name').attr('class')
console.log(attr)
$('.name').attr('id','name')  // 요소 속성 설정
$('.name').removeAttr('my')  // 요소의 특정 속성 제거

var imgSrc = $('.box5 img').attr('src')
console.log(imgSrc)
$('.box5 img').attr({
    'width':150,
    'src': imgSrc.replace(imgSrc,'img/rabbit2.png'),//*체크
    'alt':'토끼2'
}).removeAttr('border')

// addClass(), removeClass(), toggleClass(), hasClass()
$('.box6 p:nth-child(1)').addClass('add')
$('.box6 p:nth-child(2)').removeClass('block')
var is_has1 = $('.box6 p:nth-child(1)').hasClass('add')  // 있으면 true 없으면 false
var is_has2 = $('.box6 p:nth-child(2)').hasClass('block')
console.log('is_has1,is_has2 ',is_has1,is_has2)
$('.box6 p:nth-child(3)').toggleClass('to')  // 있으면 삭제 없으면 추가


ex01_selector05.html

const js_user_name = document.querySelector('#user_name')
console.log(js_user_name.value)
const user_name = $('#user_name')
const user_id = $('#user_id')

console.log('name',$('#user_name').val())  // 대상.var() 대상의 value값
$('#user_name').val('길순이')
console.log('name',$('#user_name').val())

// prop()  *체크
$('#chk1').prop('checked')  // 해당 체크 박스의 체크값 리턴

$('#chk1').prop('checked',true)  // checked 값 true/false 설정

// 선택된 항목의 index값 추출
var sel_result = $('#sel').prop('selectedIndex')  // select태그 내에 선택된 option의 index번호 리턴
$('#sel').on('change',function(e){
    // --- prop() 적용 ---
    let index = $(this).prop('selectedIndex')  // 1. 변경된 항목의 index추출
    // console.log('selected Index:'+index)
    // $(this).find('option').eq(index).prop('selected',true)  // 2. 변경된 항목 index값으로 항목의 찾아 select옵션 적용
    // let sel_value = $('#sel option:selected').val()  // 3. 변경시킨 select 항목 값 추출
    // console.log('현재 선택된 항목:'+sel_value)

    // -- attr() --
    $(this).find('option').attr('selected',false)  // select 속성 모두 삭제
    $(this).find('option').eq(index).attr('selected',true)  // 변경된 항목에 select 속성 추가
})


ex01_selector06.html

// var box8 = document.querySelector('.box8')  // 안됨
var box8 = $('.box8')
console.log('width:'+box8.width())  // 순수 박스의 가로
console.log('height:'+box8.height())  // 세로
console.log('innerWidth:'+box8.innerWidth())  // 패딩 포함
console.log('innerHeight:'+box8.innerHeight())
console.log('outerWidth:'+box8.outerWidth())  // border까지 포함
console.log('outerHeight:'+box8.outerHeight())