@Autowired 어노테이션은 스프링 프레임워크에서 의존성 주입(Dependency Injection)을 자동으로 처리하는 데 사용됩니다.
이를 통해 스프링 컨테이너가 자동으로 필요한 빈(Bean)을 주입해 줍니다.

@Controller: 이 어노테이션은 스프링 MVC의 컨트롤러 클래스를 나타내며, 웹 요청을 처리하는 역할을 합니다.
	@Controller가 붙은 클래스는 웹 요청을 받고, 적절한 서비스를 호출한 후, 뷰를 반환합니다.

@RequestMapping: 이 어노테이션은 특정 URL 패턴을 컨트롤러 메서드와 매핑하는 데 사용됩니다.
	클래스 수준에서 사용하면 모든 메서드에 공통으로 적용되는 기본 URL을 설정할 수 있습니다.
	메서드 수준에서 사용하면 해당 메서드가 처리할 특정 URL을 정의합니다.

@Repository: 이 어노테이션은 데이터 접근 계층(DAO)의 클래스를 나타냅니다.
	주로 데이터베이스 작업을 처리하는 클래스에 사용되며, 스프링이 예외를 데이터 접근 계층의 예외로 변환하도록 도와줍니다.
	@Repository를 사용하면 해당 클래스가 예외 변환 기능을 제공받게 됩니다.

@Component: 이 어노테이션은 스프링의 일반적인 빈(Bean)으로 등록하기 위해 사용됩니다.
	@Component가 붙은 클래스는 스프링 컨테이너에 의해 관리되는 빈으로 등록됩니다.
	이 어노테이션은 특정 역할에 따라 @Controller, @Service, @Repository 등의 더 구체적인 어노테이션으로 대체될 수 있습니다.

위의 각 어노테이션은 스프링 애플리케이션에서 특정 역할을 담당하는 클래스나 메서드를 정의하고 관리하는 데 중요한 역할을 합니다.


프로젝트 springbootJsp 참조

@Autowired 예시

public final class E03MemberDAOJavaSQL {
//	@Autowired
//	E02MemberJavaSQLMapperInterface member;
//	@Autowired
//	private SqlSession session;
	
	// @Autowired 미사용 시
	private final E02MemberJavaSQLMapperInterface member;
    	private final SqlSession session;
    
   	// 생성자를 통해 의존성 주입
    	public E03MemberDAOJavaSQL(E02MemberJavaSQLMapperInterface member, SqlSession session) {
      	this.member = member;
      	this.session = session;
    	}
	
	// 회원 목록
	public List<MemberVO> getMemberList() {
//		member = session.getMapper(E02MemberJavaSQLMapperInterface.class);
		
		return member.getMemberList();
	}
}


@Repository예시

@Repository
public class E02MemberDAOMybatis {}



@Component예시

@Component
public final class E03MemberDAOJavaSQL {
private final E02MemberJavaSQLMapperInterface member;
private final E02MemberJavaSQLMapperInterface member;
	private final SqlSession session;
    
   	// 생성자를 통해 의존성 주입
   	public E03MemberDAOJavaSQL(E02MemberJavaSQLMapperInterface member, SqlSession session) {
       	this.member = member;
        	this.session = session;
        
    }

	// 1. 어노테이션 적용
	// 1-1 회원 목록
	public List<MemberVO> getMemberList() {
//		member = session.getMapper(E02MemberJavaSQLMapperInterface.class);
		
		return member.getMemberList();
	}
}

@Controller
@RequestMapping("/member/sqlclass")
public class MemberJavaSQLController {

}



설정(setting)

application.properties 설정

spring.application.name=springbootJsp

###### 첫 시작 서버 설정 ######
# 톰캣 서버 설정
server.port = 8099

# springboot에서 jsp view 인식 => 뷰리졸버 설정
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

###### 데이타베이스 설정 ######
# db
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDrive
#spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/xe
##log4jdbc (로그)사용 설정##
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@//localhost:1521/xe
##------------##
spring.datasource.username=c##user
spring.datasource.password=1234

# oracle 설정
spring.datasource.hikari.connection-test-query=SELECT SYSDATE FROM DUAL

# mariadb 설정

###### ######

# mybatis 설정  sql소스코드를 분리 시키기 위해 사용
# mapper 경로 설정: classpath를 통해서 resource폴더를 지칭(sql xml 집합)
#src/main/resources/사용  mapper폴더 만듬  **모든 하위 폴더  *.xml 모든 xml
mybatis.mapper-locations=classpath:mapper/**/*.xml
# mybatis xml 환경설정
mybatis.config-location=classpath:/mybatis-config.xml

# mybatis 패키지명 생략하고 클래스명만 사용할 경우
mybatis.type-aliases-package=com.spring.springbootJsp.**.vo


# 인텔리제이 편집기: yml파일에서 적용시
# "**"인식안됨 => "*"적용
# mybatis.mapper-locations=classpath:mapper/*/*.xml

###### ######

mybatis 사용 설정

mybatis-config.xml 설정

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "HTTP://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<typeAliases>
		<!-- <typeAlias alias="MemberVO" type="com.spring.springbootJsp.member.vo.MemberVO"/> -->
	</typeAliases>
</configuration>

<!-- sprintboot 3.xx이후 : https => HTTP로 설정 -->

<!-- mapper xml 맵핑 설정 -->
<!-- application.properties에 이미 설정했음
<configuration>
	<mappers>
		<mapper resource="mapper/board/*.xml"/>
	</mappers>
</configuration>
 -->



로그 사용

application.properties에서 설정
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@//localhost:1521/xe


log4jdbc.log4j2.properties 설정

log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator


logback-spring.xml 설정

<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">

	<!-- 로그 ** -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>%n %d %5p [%c] %m</Pattern>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</Pattern>
        </encoder>
    </appender>

    <appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>%n %d %5p %m%n</Pattern>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</Pattern>
        </encoder>
    </appender>

	<!-- com.spring.springbootJSP 하위 부분에 대해서 debug수즌으로 로그 출력 ** -->
    <logger name="com.spring.springbootJsp" level="DEBUG" appender-ref="console" />
    
    <logger name="jdbc.sqlonly" 		level="debug" appender-ref="console-infolog" />
		<logger name="jdbc.connection" 	level="OFF"/>
		<logger name="jdbc.audit" 			level="OFF"/>
		<logger name="jdbc.resultset" 	level="OFF"/>
    <logger name="jdbc.resultsettable" level="info" appender-ref="console-infolog" />

	<!-- 애플리케이션 전체에 대해서는 info수준으로 로그 출력 -->
    <root level="info">
        <appender-ref ref="console" />
    </root>
</configuration>

설명
<!-- 
로그: 애플리케이션에서 유지관리를 위해 웹 사이트에 접속한 사용자 정보나 각 클래스의 메서드 호출 시각 등
여러가지 정보를 파일로 저장해서 관리하는 목적의 로그 관련 기능을 제공.

<Appoend> : 로그의 출력 위치 결정(파일, 콘솔, DB등) xxxAppender로 끝나는 클래스
<Layout> : Appender 위치 결정했으면 어떤 형식을 출력할지 레이아웃을 결정
<Logger> : 로그 메시지를 Appender에 전달
 -->

<!--  로그 파일 생성 예문1 -->
<!-- <?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <property name="LOGS_PATH" value="d:/file_upload/logs"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>
        </layout>
    </appender>
    <appender name="SAMPLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
  
    <appender name="DAILY_ROLLING_FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_PATH}/logback.log</file>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/logback.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>  파일당 최고 용량 kb, mb, gb 
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <logger name="com.example.test2" level="DEBUG">
        <appender-ref ref="SAMPLE" />
    </logger>
    <logger name="com.example.test2" level="INFO">
        <appender-ref ref="DAILY_ROLLING_FILE_APPENDER" />
    </logger>
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="DAILY_ROLLING_FILE_APPENDER" />
    </root>
</configuration> -->

<!--  로그 파일 생성 예문2 -->
<!-- 
<?xml version="1.0" encoding="UTF-8"?>
60초마다 설정 파일의 변경을 확인 하여 변경시 갱신
<configuration scan="true" scanPeriod="60 seconds">
    springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.
    <springProfile name="local">
        <property resource="logback-local.properties"/>
    </springProfile>
    <springProfile name="dev">
        <property resource="logback-dev.properties"/>
    Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
 
    log file path
    <property name="LOG_PATH" value="${log.config.path}"/>
    log file name
    <property name="LOG_FILE_NAME" value="${log.config.filename}"/>
    err log file name
    <property name="ERR_LOG_FILE_NAME" value="err_log"/>
    pattern
    <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>
 
    Console Appender
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
 
    File Appender
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        파일경로 설정
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
 
        출력패턴 설정
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
 
        Rolling 정책
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                파일당 최고 용량 kb, mb, gb
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거
            <maxHistory>30</maxHistory>
            <MinIndex>1</MinIndex>
            <MaxIndex>10</MaxIndex>
        </rollingPolicy>
    </appender>
 
    에러의 경우 파일에 로그 처리
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        Rolling 정책
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                파일당 최고 용량 kb, mb, gb
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>
 
    root레벨 설정
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </root>
 
    특정패키지 로깅레벨 설정
    <logger name="org.apache.ibatis" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </logger>
</configuration> -->




<!--Log4jdbc-->
<!-- 
	<logger name="jdbc" level="OFF"/>
	<logger name="jdbc.connection" level="OFF"/>
	<logger name="jdbc.sqlonly" level="OFF"/>
	<logger name="jdbc.sqltiming" level="DEBUG" additivity="false">
		<appender-ref ref="DATABASE_FILE_APPENDER"/>
	</logger>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="OFF"/>
  -->
  
  <!-- 
  jdbc.connection 		: 수행 도중 열리고 닫히는 연결 내용을 포함합니다. 연결 누수 문제를 찾는데에 유용다.
  jdbc.resultsettable : JDBC 결과를 테이블로 기록. 
  jdbc.resultset			: DBC 결과를 포함합니다. ResultSet 오브젝트에 대한 모든 호출이 로깅
  jdbc.audit 					: ResultSets를 제외한 모든 JBDC 호출 정보를 로그로 남긴다. 
  											이는 매우 큰 볼륨을 가지는 결과물이므로, 특별히 JDBC 문제를 추적할 때 외엔 권하지 않는다.
  jdbc.sqltiming			: SQL문과 해당 SQL을 실행하는데 걸린 시간을 포함.
  jdbc.sqlonly				: SQL문만을 로그로 남긴다. 가독성을 위해, preparedStatement는 관련된 arguments 값으로 대체.
  
  
  Appender클래스
  
  Consoleappender : 콘솔에 로그 메시지를 출력
  FileAppender : 파일에 로그 메시지 출력
  RollingFileAppender : 파일 크기가 일정 기준을 넘으면 기존 파일을 백업파일로 바꾸고 처음 부터 다시 기록
  //DailyRollingAppender : 설정한 기간 단위로 새 파일을 만들어 로그 메시지를 기록
  
  
  PatternLayout 클래스
  
  %p: debug, info, error, fatal 등 ㄹ그 레벨 이름 출력
  %m : 로그 메시지 출력
  %d : 로깅 이벤트 발생 시각 출력
  %F : 로깅이 발생한 프로그램 파일 이름 출력
  %l : 로깅이 발생한 caller의 정보 출력
  %L : 로깅이 발생한 caller의 라인 수 출력
  %M : 로깅이 발생한 caller의 method이름 출력
  %c : 로깅메시지 앞에 전체 패키지 이름이나 전체 파일이름 출력
  
  
  log4j 로그 레벨
  
  FATAL: 시스템 차원세 심각한 문제 발생해 애플리케이션 작동이 부가능할 경우에 해당하는 레벨
  ERROR: 실행 중 문제가 발생한 상태
  WARN: 경고 메시지 - 향후 시스템 오류의 원이 될 수 있는 경우
  INFO: 로그인, 상태 변경과 같은 실제 애플리케이션 운영과 관련된 정보 메시지 표시
  DEVUG: 개발시 디버깅 용도 사용하는 메시지
  TRACE: DEBUG 레벨보다 상세한 로깅 정보를 출력하기 위한 도입된 레벨
  
   -->



gradle사용

프로젝트 설정
------------------application.properties-------------------
spring.application.name=MyProject

# web 서버 설정
server.port=9090
server.servlet.encoding.charset=UTF-8
#server.servlet.context-path=/

#----------DB 설정------------# Mariadb 사용할 경우
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/shopdb
spring.datasource.username=root
spring.datasource.password=3690
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# H2 DB 사용할 경우
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:mem:test
#spring.datasource.username=sa
#spring.datasource.password=

#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#@GeneratedValue(strategy=GenerationType.AUTO)

#-------------db 실행시 로그----------------
# 실행되는 쿼리 콘솔 출력
spring.jpa.properties.hibernate.show_sql=true
# 콘솔 창에 출력되는 쿼리를 가독성 있게 들여쓰기 하여 표시
spring.jpa.properties.hibernate.format_sql=true
#쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql=trace

spring.jpa.hibernate.ddl-auto=create

#none: 사용하지 않음
#validate: 엔티티와 테이블 정상 매핑 확인

#create: 기존 테이블 삭제 후 테이블 생성
#create-drop: 기존 테이블 삭제 테이블 생성. 종료 시점에 테이블 삭제
#update: 변경된 스키마 적용

#-------------------------------------------

#log 레벨 설정
logging.level.org.SpringFramework=info
logging.level.org.com.spring.shop=debug
-----------------------------------------------------------

H2 test서버랑 충돌일어남



package com.springboot.myshop.controller;


import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
@Log4j2
public class TestController {
    @GetMapping("/hello")
    public void hello(Model model) {
        log.info("hello~");
        model.addAttribute("msg", "Hello World ~");

    }
}





//1. QueryDsl
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}


	// 2. QueryDsl 관련 라이브러리
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor(
			"jakarta.persistence:jakarta.persistence-api",
			"jakarta.annotation:jakarta.annotation-api",
			"com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

// 3. QueryDsl
sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
		}
	}
}
compileJava.dependsOn('clean')


도메인 생성

우측 gradle아이콘(코끼리)
other -> compileJava 실행
entity를 복사해서 Q엔티티로 만들어줌 (build->generated->sources->내프로젝트entity경로이름폴더->Q엔티티)

build -> clean 실행 (초기화)  build폴더 사라짐

오류 발생
JPA queryDSL error => "Attempt to recreate a file" 도메인 중복 발생
IntelliJ -> Gradle 변환 or
Gradle -> IntelliJ 변환

하다가 잘 안되면 clean으로 초기화 후 재생성



/*
 * QuerydslPredicateExecutor 적용하여 상품 조회 기능 구현
 * Predicate : 조건이 맞는지 판별
 * Repository에서는 Predicate를 파라미터로 전달하가 위해 QuerydslPredicateExecutor 인터페이스를 상속
 */

/*
 * Querydsl 장점
 * - 고정된 SQL문이 아닌 조건에 맞게 동적 쿼리를 생성
 * - 비슷한 쿼리를 재사용, 제약 조건 조립 및 가독성 향상
 * - 문자열이 아닌 자바 소스코드로 작성하기 때문에 컴파일 시점에 오류생성
 * - IDE도움을 받아 자동 완성 기능 활용
 *
 */


/*
 * JpaRepository 지원하는 메서드 (기본적으로 들어있는 기능)
 * <S extends T> save(S entity) : 저장 및 수정
 * void delete(t entity) : 삭제
 * count() : 총 개수 반환
 * Iterable<T> findAll() : 모든 엔티티 조회
 *
 * find+(엔티티이름) +By + 변수(필드)명
 *
 *
 */

/* 
 * JpaRepository 기본 기능 (by ChatGPT)
 *
 * 메서드 이름	설명
 * save(S entity)	주어진 엔티티를 저장하거나 업데이트합니다.
 * saveAll(Iterable<S> entities)	주어진 엔티티 목록을 모두 저장하거나 업데이트합니다.
 * findById(ID id)	주어진 ID에 해당하는 엔티티를 반환합니다. (Optional 타입으로 반환)
 * existsById(ID id)	주어진 ID에 해당하는 엔티티가 존재하는지 확인합니다.
 * findAll()	모든 엔티티를 반환합니다.
 * findAllById(Iterable<ID> ids)	주어진 ID 목록에 해당하는 모든 엔티티를 반환합니다.
 * count()	전체 엔티티의 수를 반환합니다.
 * deleteById(ID id)	주어진 ID에 해당하는 엔티티를 삭제합니다.
 * delete(T entity)	주어진 엔티티를 삭제합니다.
 * deleteAllById(Iterable<? extends ID> ids)	주어진 ID 목록에 해당하는 모든 엔티티를 삭제합니다.
 * deleteAll(Iterable<? extends T> entities)	주어진 엔티티 목록을 모두 삭제합니다.
 * deleteAll()	모든 엔티티를 삭제합니다.
 * 
 * 
 */

// JPA Query Method
//
// Distinct             findDistinctByLastnameAndFirstname	select distinct …​ where x.lastname = ?1 and x.firstname = ?2
// And	                findByLastnameAndFirstname	… where x.lastname = ?1 and x.firstname = ?2
// Or	                findByLastnameOrFirstname	… where x.lastname = ?1 or x.firstname = ?2
// Is, Equals	        findByFirstname,findByFirstnameIs,findByFirstnameEquals	… where x.firstname = ?1
// Between	            findByStartDateBetween	… where x.startDate between ?1 and ?2
// LessThan	            findByAgeLessThan	… where x.age < ?1
// LessThanEqual	    findByAgeLessThanEqual	… where x.age <= ?1
// GreaterThan	        findByAgeGreaterThan	… where x.age > ?1
// GreaterThanEqual	    findByAgeGreaterThanEqual	… where x.age >= ?1
// After	            findByStartDateAfter	… where x.startDate > ?1
// Before	            findByStartDateBefore	… where x.startDate < ?1
// IsNull, Null	        findByAge(Is)Null	… where x.age is null
// IsNotNull, NotNull	findByAge(Is)NotNull	… where x.age not null
// Like	                findByFirstnameLike	… where x.firstname like ?1
// NotLike	            findByFirstnameNotLike	… where x.firstname not like ?1
// StartingWith	        findByFirstnameStartingWith	… where x.firstname like ?1 (parameter bound with appended %)
// EndingWith	        findByFirstnameEndingWith	… where x.firstname like ?1 (parameter bound with prepended %)
// Containing	        findByFirstnameContaining	… where x.firstname like ?1 (parameter bound wrapped in %)
// OrderBy	            findByAgeOrderByLastnameDesc	… where x.age = ?1 order by x.lastname desc
// Not	                findByLastnameNot	… where x.lastname <> ?1
// In	                findByAgeIn(Collection<Age> ages)	… where x.age in ?1
// NotIn	            findByAgeNotIn(Collection<Age> ages)	… where x.age not in ?1
// True	                findByActiveTrue()	… where x.active = true
// False	            findByActiveFalse()	… where x.active = false
// IgnoreCase	        findByFirstnameIgnoreCase	… where UPPER(x.firstname) = UPPER(?1)





/*
 * 페이징 관련 메서드(JPA의 Page Interface Method)
 *
 * 메서드		                                    설명		                                    반환 타입
 * getContent()	                                    현재 페이지에 있는 데이터 리스트를 반환	        List<T>
 * getNumber()	                                    현재 페이지 번호를 반환	                        int
 * getSize()	                                    페이지 크기를 반환	                            int
 * getTotalPages()	                                전체 페이지 수를 반환	                        int
 * getTotalElements()	                            전체 데이터 수를 반환	                        long
 * hasNext()	                                    다음 페이지가 있는지 여부를 반환	                boolean
 * hasPrevious()	                                이전 페이지가 있는지 여부를 반환	                boolean
 * isFirst()	                                    첫 번째 페이지인지 여부를 반환	                boolean
 * isLast()	                                        마지막 페이지인지 여부를 반환	                boolean
 * getNumberOfElements()	                        현재 페이지에 포함된 요소의 개수를 반환	        int
 * getPageable()	                                페이지에 대한 메타데이터를 반환	                Pageable
 * getSort()	                                    페이지의 정렬 정보를 반환	                    Sort
 * isEmpty()	                                    페이지가 비어 있는지 여부를 반환	                boolean
 * iterator()	                                    페이지의 요소를 반복할 수 있는 iterator를 반환	Iterator<T>
 * subList(int fromIndex, int toIndex)	            페이지의 특정 범위의 요소를 리스트로 반환	        List<T>
 * stream()	                                        페이지의 요소를 스트림으로 반환	                Stream<T>
 * map(Function<? super T,? extends R> converter)	페이지의 요소를 변환하여 새로운 페이지로 반환	    Page<R>
 * nextPageable()	                                다음 페이지의 Pageable을 반환	                Pageable
 * previousPageable()	                            이전 페이지의 Pageable을 반환	                Pageable
 *
 */


/*
 * JPAQuery 데이터 변환 메서드
 * List<T> fetch() : 조회한 결과를 List로 반환
 * T fetchOne() : 조회 대상이 1건인 경우 제네릭으로 지정한 타입 반환
 * T fetchFirst() : 조회 대상 중 1건만 반환
 * Long fetchCount() : 조회 대상 개수 반환
 *  =>  fetchCount() 메서드 대신 : .fetch().size() 형식으로  변경
 * QueryResult<T> fetchResults() : 조회한 리스트와 전체 개수를 포함한 QueryResult반환
 * 
 * QuerydslPredicateExecutor 적용하여 상품 조회 기능 구현
 * Predicate : 조건이 맞는지 판별
 * Repository에서는 Predicate를 파라미터로 전달하가 위해 QuerydslPredicateExecutor 인터페이스를 상속
 *
 */





AuditingEntityListener : 엔티티가 데이터베이스에 추가되거나 변경될 때 자동으로 시간 설정

AuditingEntityListener 사용을 위해 다음을 설정

projectApplication에 @EnableJpaAuditing 설정


package com.spring.MyProject.entity;

import jakarta.persistence.Column;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.MappedSuperclass;
import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

// AuditingEntityListener : 엔티티가 데이터베이스에 추가되거나 변경될 때 자동으로 시간 설정

@MappedSuperclass  // 공동속성처리
@EntityListeners(value={AuditingEntityListener.class})
@Setter@Getter
public abstract class BaseEntity {  // 공동 멤버 변수들은 추상 클래스 정의

    // 엔티티가 생성되어 저장될 때 시간을 자동으로 저장
    @CreatedDate
    @Column(name="regdate", updatable=false)  // updatable=false 수정되는 시점에 기능 off
    private LocalDateTime regDate;

    //엔티티가 값을 변경될 때 시간을 자동으로 저장
    @LastModifiedDate
    @Column(name="moddate")
    private LocalDateTime modDate;

}


기존 Board 객체에 BaseEntity추가(extends BaseEntity)

package com.spring.MyProject.entity;

import jakarta.persistence.*;
import lombok.*;

// Entity 정의 : 테이블에 적용될 구조설계 정의하여 테이블과 entity 1:1 맵핑
@Table(name="Board")
@Entity
@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class Board extends BaseEntity{  //extends BaseEntity 하면 BaseEntity에 있는 변수 여기에 추가

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long bno;
    @Column(length = 500, nullable = false)
    private String title;
    @Column(length = 2000, nullable = false)  // length = (max = 16383)
    private String content;
    @Column(length = 50, nullable = false)
    private String writer;

    // 데이터 수정하는 메서드
    public void change(String title, String content) {
        this.title = title;
        this.content = content;
    }

}

package com.spring.MyProject.repository.search;


import com.spring.MyProject.entity.Board;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

// 단순 페이지 처리 기능 설게
public interface BoardSearch {
    Page<Board> search(Pageable pageable);

}




페이징(Paging)은 데이터베이스나 리스트에서 대량의 데이터를 한 번에 처리하지 않고, 여러 페이지로 나누어 처리하는 방법입니다. 이렇게 하면 한 번에 다루는 데이터의 양을 줄여서 성능을 개선하고, 사용자가 데이터를 쉽게 탐색할 수 있게 됩니다. 페이징을 구현할 때 일반적으로 사용하는 요소들은 다음과 같습니다:

페이지 번호(Page Number):

사용자가 보고자 하는 페이지의 번호입니다. 일반적으로 1부터 시작합니다.
페이지 크기(Page Size):

한 페이지에 포함될 데이터의 개수입니다. 예를 들어, 페이지 크기가 10이면 한 페이지에 10개의 데이터가 표시됩니다.
총 데이터 개수(Total Count):

전체 데이터의 총 개수입니다. 이는 페이징의 총 페이지 수를 계산하는 데 사용됩니다.
총 페이지 수(Total Pages):

총 데이터 개수와 페이지 크기를 사용하여 계산됩니다. 예를 들어, 총 데이터가 50개이고 페이지 크기가 10이면 총 페이지 수는 5가 됩니다.
오프셋(Offset):

데이터베이스 쿼리에서 특정 페이지의 데이터를 가져오기 위해 사용하는 시작 지점입니다. 예를 들어, 페이지 크기가 10이고 페이지 번호가 2인 경우, 오프셋은 10이 됩니다(즉, 11번째 데이터부터 가져옴).
페이징의 예
페이지 번호: 1

오프셋: 0
가져올 데이터 개수: 10
페이지 번호: 2

오프셋: 10
가져올 데이터 개수: 10
Spring Data JPA에서 페이징 사용 예시
Spring Data JPA에서는 Pageable 인터페이스를 사용하여 페이징을 쉽게 구현할 수 있습니다. 예를 들어, 다음과 같은 코드를 통해 페이징을 구현할 수 있습니다:

java
코드 복사
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

public void getPagedData() {
    int page = 0; // 페이지 번호 (0부터 시작)
    int size = 10; // 페이지 크기

    Pageable pageable = PageRequest.of(page, size);
    Page<MyEntity> resultPage = myRepository.findAll(pageable);

    System.out.println("Total pages: " + resultPage.getTotalPages());
    System.out.println("Total elements: " + resultPage.getTotalElements());
    System.out.println("Current page number: " + resultPage.getNumber());
    System.out.println("Current page size: " + resultPage.getSize());
    resultPage.getContent().forEach(System.out::println); // 현재 페이지의 데이터
}
위 예시에서 PageRequest.of(page, size)를 통해 Pageable 객체를 생성하고, findAll(pageable) 메서드를 사용하여 특정 페이지의 데이터를 가져옵니다. Page 객체는 페이징 관련 정보를 제공하며, getContent() 메서드를 통해 현재 페이지의 데이터를 리스트 형태로 가져올 수 있습니다.

페이징의 장점
성능 향상: 한 번에 처리하는 데이터 양을 줄여서 메모리 사용량을 줄이고, 쿼리 성능을 향상시킵니다.
사용자 경험 개선: 사용자가 데이터를 쉽게 탐색하고, 필요한 데이터를 빠르게 찾을 수 있도록 도와줍니다.
관리 용이성: 대량의 데이터를 관리하고 처리하는 데 효율적입니다.
페이징을 적절히 사용하면 대량의 데이터를 효과적으로 처리하고, 애플리케이션의 성능과 사용성을 크게 개선할 수 있습니다.




