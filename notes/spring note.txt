@Autowired 어노테이션은 스프링 프레임워크에서 의존성 주입(Dependency Injection)을 자동으로 처리하는 데 사용됩니다.
이를 통해 스프링 컨테이너가 자동으로 필요한 빈(Bean)을 주입해 줍니다.

@Controller: 이 어노테이션은 스프링 MVC의 컨트롤러 클래스를 나타내며, 웹 요청을 처리하는 역할을 합니다.
	@Controller가 붙은 클래스는 웹 요청을 받고, 적절한 서비스를 호출한 후, 뷰를 반환합니다.

@RequestMapping: 이 어노테이션은 특정 URL 패턴을 컨트롤러 메서드와 매핑하는 데 사용됩니다.
	클래스 수준에서 사용하면 모든 메서드에 공통으로 적용되는 기본 URL을 설정할 수 있습니다.
	메서드 수준에서 사용하면 해당 메서드가 처리할 특정 URL을 정의합니다.

@Repository: 이 어노테이션은 데이터 접근 계층(DAO)의 클래스를 나타냅니다.
	주로 데이터베이스 작업을 처리하는 클래스에 사용되며, 스프링이 예외를 데이터 접근 계층의 예외로 변환하도록 도와줍니다.
	@Repository를 사용하면 해당 클래스가 예외 변환 기능을 제공받게 됩니다.

@Component: 이 어노테이션은 스프링의 일반적인 빈(Bean)으로 등록하기 위해 사용됩니다.
	@Component가 붙은 클래스는 스프링 컨테이너에 의해 관리되는 빈으로 등록됩니다.
	이 어노테이션은 특정 역할에 따라 @Controller, @Service, @Repository 등의 더 구체적인 어노테이션으로 대체될 수 있습니다.

위의 각 어노테이션은 스프링 애플리케이션에서 특정 역할을 담당하는 클래스나 메서드를 정의하고 관리하는 데 중요한 역할을 합니다.


프로젝트 springbootJsp 참조

@Autowired 예시

public final class E03MemberDAOJavaSQL {
//	@Autowired
//	E02MemberJavaSQLMapperInterface member;
//	@Autowired
//	private SqlSession session;
	
	// @Autowired 미사용 시
	private final E02MemberJavaSQLMapperInterface member;
    	private final SqlSession session;
    
   	// 생성자를 통해 의존성 주입
    	public E03MemberDAOJavaSQL(E02MemberJavaSQLMapperInterface member, SqlSession session) {
      	this.member = member;
      	this.session = session;
    	}
	
	// 회원 목록
	public List<MemberVO> getMemberList() {
//		member = session.getMapper(E02MemberJavaSQLMapperInterface.class);
		
		return member.getMemberList();
	}
}


@Repository예시

@Repository
public class E02MemberDAOMybatis {}



@Component예시

@Component
public final class E03MemberDAOJavaSQL {
private final E02MemberJavaSQLMapperInterface member;
private final E02MemberJavaSQLMapperInterface member;
	private final SqlSession session;
    
   	// 생성자를 통해 의존성 주입
   	public E03MemberDAOJavaSQL(E02MemberJavaSQLMapperInterface member, SqlSession session) {
       	this.member = member;
        	this.session = session;
        
    }

	// 1. 어노테이션 적용
	// 1-1 회원 목록
	public List<MemberVO> getMemberList() {
//		member = session.getMapper(E02MemberJavaSQLMapperInterface.class);
		
		return member.getMemberList();
	}
}

@Controller
@RequestMapping("/member/sqlclass")
public class MemberJavaSQLController {

}