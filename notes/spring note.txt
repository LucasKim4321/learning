@Autowired 어노테이션은 스프링 프레임워크에서 의존성 주입(Dependency Injection)을 자동으로 처리하는 데 사용됩니다.
이를 통해 스프링 컨테이너가 자동으로 필요한 빈(Bean)을 주입해 줍니다.

@Controller: 이 어노테이션은 스프링 MVC의 컨트롤러 클래스를 나타내며, 웹 요청을 처리하는 역할을 합니다.
	@Controller가 붙은 클래스는 웹 요청을 받고, 적절한 서비스를 호출한 후, 뷰를 반환합니다.

@RequestMapping: 이 어노테이션은 특정 URL 패턴을 컨트롤러 메서드와 매핑하는 데 사용됩니다.
	클래스 수준에서 사용하면 모든 메서드에 공통으로 적용되는 기본 URL을 설정할 수 있습니다.
	메서드 수준에서 사용하면 해당 메서드가 처리할 특정 URL을 정의합니다.

@Repository: 이 어노테이션은 데이터 접근 계층(DAO)의 클래스를 나타냅니다.
	주로 데이터베이스 작업을 처리하는 클래스에 사용되며, 스프링이 예외를 데이터 접근 계층의 예외로 변환하도록 도와줍니다.
	@Repository를 사용하면 해당 클래스가 예외 변환 기능을 제공받게 됩니다.

@Component: 이 어노테이션은 스프링의 일반적인 빈(Bean)으로 등록하기 위해 사용됩니다.
	@Component가 붙은 클래스는 스프링 컨테이너에 의해 관리되는 빈으로 등록됩니다.
	이 어노테이션은 특정 역할에 따라 @Controller, @Service, @Repository 등의 더 구체적인 어노테이션으로 대체될 수 있습니다.

위의 각 어노테이션은 스프링 애플리케이션에서 특정 역할을 담당하는 클래스나 메서드를 정의하고 관리하는 데 중요한 역할을 합니다.


프로젝트 springbootJsp 참조

@Autowired 예시

public final class E03MemberDAOJavaSQL {
//	@Autowired
//	E02MemberJavaSQLMapperInterface member;
//	@Autowired
//	private SqlSession session;
	
	// @Autowired 미사용 시
	private final E02MemberJavaSQLMapperInterface member;
    	private final SqlSession session;
    
   	// 생성자를 통해 의존성 주입
    	public E03MemberDAOJavaSQL(E02MemberJavaSQLMapperInterface member, SqlSession session) {
      	this.member = member;
      	this.session = session;
    	}
	
	// 회원 목록
	public List<MemberVO> getMemberList() {
//		member = session.getMapper(E02MemberJavaSQLMapperInterface.class);
		
		return member.getMemberList();
	}
}


@Repository예시

@Repository
public class E02MemberDAOMybatis {}



@Component예시

@Component
public final class E03MemberDAOJavaSQL {
private final E02MemberJavaSQLMapperInterface member;
private final E02MemberJavaSQLMapperInterface member;
	private final SqlSession session;
    
   	// 생성자를 통해 의존성 주입
   	public E03MemberDAOJavaSQL(E02MemberJavaSQLMapperInterface member, SqlSession session) {
       	this.member = member;
        	this.session = session;
        
    }

	// 1. 어노테이션 적용
	// 1-1 회원 목록
	public List<MemberVO> getMemberList() {
//		member = session.getMapper(E02MemberJavaSQLMapperInterface.class);
		
		return member.getMemberList();
	}
}

@Controller
@RequestMapping("/member/sqlclass")
public class MemberJavaSQLController {

}



설정(setting)

application.properties 설정

spring.application.name=springbootJsp

###### 첫 시작 서버 설정 ######
# 톰캣 서버 설정
server.port = 8099

# springboot에서 jsp view 인식 => 뷰리졸버 설정
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

###### 데이타베이스 설정 ######
# db
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDrive
#spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/xe
##log4jdbc (로그)사용 설정##
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@//localhost:1521/xe
##------------##
spring.datasource.username=c##user
spring.datasource.password=1234

# oracle 설정
spring.datasource.hikari.connection-test-query=SELECT SYSDATE FROM DUAL

# mariadb 설정

###### ######

# mybatis 설정  sql소스코드를 분리 시키기 위해 사용
# mapper 경로 설정: classpath를 통해서 resource폴더를 지칭(sql xml 집합)
#src/main/resources/사용  mapper폴더 만듬  **모든 하위 폴더  *.xml 모든 xml
mybatis.mapper-locations=classpath:mapper/**/*.xml
# mybatis xml 환경설정
mybatis.config-location=classpath:/mybatis-config.xml

# mybatis 패키지명 생략하고 클래스명만 사용할 경우
mybatis.type-aliases-package=com.spring.springbootJsp.**.vo


# 인텔리제이 편집기: yml파일에서 적용시
# "**"인식안됨 => "*"적용
# mybatis.mapper-locations=classpath:mapper/*/*.xml

###### ######

mybatis 사용 설정

mybatis-config.xml 설정

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "HTTP://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<typeAliases>
		<!-- <typeAlias alias="MemberVO" type="com.spring.springbootJsp.member.vo.MemberVO"/> -->
	</typeAliases>
</configuration>

<!-- sprintboot 3.xx이후 : https => HTTP로 설정 -->

<!-- mapper xml 맵핑 설정 -->
<!-- application.properties에 이미 설정했음
<configuration>
	<mappers>
		<mapper resource="mapper/board/*.xml"/>
	</mappers>
</configuration>
 -->



로그 사용

application.properties에서 설정
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@//localhost:1521/xe


log4jdbc.log4j2.properties 설정

log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator


logback-spring.xml 설정

<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">

	<!-- 로그 ** -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>%n %d %5p [%c] %m</Pattern>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</Pattern>
        </encoder>
    </appender>

    <appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>%n %d %5p %m%n</Pattern>
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</Pattern>
        </encoder>
    </appender>

	<!-- com.spring.springbootJSP 하위 부분에 대해서 debug수즌으로 로그 출력 ** -->
    <logger name="com.spring.springbootJsp" level="DEBUG" appender-ref="console" />
    
    <logger name="jdbc.sqlonly" 		level="debug" appender-ref="console-infolog" />
		<logger name="jdbc.connection" 	level="OFF"/>
		<logger name="jdbc.audit" 			level="OFF"/>
		<logger name="jdbc.resultset" 	level="OFF"/>
    <logger name="jdbc.resultsettable" level="info" appender-ref="console-infolog" />

	<!-- 애플리케이션 전체에 대해서는 info수준으로 로그 출력 -->
    <root level="info">
        <appender-ref ref="console" />
    </root>
</configuration>

설명
<!-- 
로그: 애플리케이션에서 유지관리를 위해 웹 사이트에 접속한 사용자 정보나 각 클래스의 메서드 호출 시각 등
여러가지 정보를 파일로 저장해서 관리하는 목적의 로그 관련 기능을 제공.

<Appoend> : 로그의 출력 위치 결정(파일, 콘솔, DB등) xxxAppender로 끝나는 클래스
<Layout> : Appender 위치 결정했으면 어떤 형식을 출력할지 레이아웃을 결정
<Logger> : 로그 메시지를 Appender에 전달
 -->

<!--  로그 파일 생성 예문1 -->
<!-- <?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <property name="LOGS_PATH" value="d:/file_upload/logs"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>
        </layout>
    </appender>
    <appender name="SAMPLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
  
    <appender name="DAILY_ROLLING_FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_PATH}/logback.log</file>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/logback.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>  파일당 최고 용량 kb, mb, gb 
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <logger name="com.example.test2" level="DEBUG">
        <appender-ref ref="SAMPLE" />
    </logger>
    <logger name="com.example.test2" level="INFO">
        <appender-ref ref="DAILY_ROLLING_FILE_APPENDER" />
    </logger>
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="DAILY_ROLLING_FILE_APPENDER" />
    </root>
</configuration> -->

<!--  로그 파일 생성 예문2 -->
<!-- 
<?xml version="1.0" encoding="UTF-8"?>
60초마다 설정 파일의 변경을 확인 하여 변경시 갱신
<configuration scan="true" scanPeriod="60 seconds">
    springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.
    <springProfile name="local">
        <property resource="logback-local.properties"/>
    </springProfile>
    <springProfile name="dev">
        <property resource="logback-dev.properties"/>
    Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
 
    log file path
    <property name="LOG_PATH" value="${log.config.path}"/>
    log file name
    <property name="LOG_FILE_NAME" value="${log.config.filename}"/>
    err log file name
    <property name="ERR_LOG_FILE_NAME" value="err_log"/>
    pattern
    <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>
 
    Console Appender
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
 
    File Appender
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        파일경로 설정
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
 
        출력패턴 설정
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
 
        Rolling 정책
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                파일당 최고 용량 kb, mb, gb
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거
            <maxHistory>30</maxHistory>
            <MinIndex>1</MinIndex>
            <MaxIndex>10</MaxIndex>
        </rollingPolicy>
    </appender>
 
    에러의 경우 파일에 로그 처리
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        Rolling 정책
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                파일당 최고 용량 kb, mb, gb
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>
 
    root레벨 설정
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </root>
 
    특정패키지 로깅레벨 설정
    <logger name="org.apache.ibatis" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </logger>
</configuration> -->




<!--Log4jdbc-->
<!-- 
	<logger name="jdbc" level="OFF"/>
	<logger name="jdbc.connection" level="OFF"/>
	<logger name="jdbc.sqlonly" level="OFF"/>
	<logger name="jdbc.sqltiming" level="DEBUG" additivity="false">
		<appender-ref ref="DATABASE_FILE_APPENDER"/>
	</logger>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="OFF"/>
  -->
  
  <!-- 
  jdbc.connection 		: 수행 도중 열리고 닫히는 연결 내용을 포함합니다. 연결 누수 문제를 찾는데에 유용다.
  jdbc.resultsettable : JDBC 결과를 테이블로 기록. 
  jdbc.resultset			: DBC 결과를 포함합니다. ResultSet 오브젝트에 대한 모든 호출이 로깅
  jdbc.audit 					: ResultSets를 제외한 모든 JBDC 호출 정보를 로그로 남긴다. 
  											이는 매우 큰 볼륨을 가지는 결과물이므로, 특별히 JDBC 문제를 추적할 때 외엔 권하지 않는다.
  jdbc.sqltiming			: SQL문과 해당 SQL을 실행하는데 걸린 시간을 포함.
  jdbc.sqlonly				: SQL문만을 로그로 남긴다. 가독성을 위해, preparedStatement는 관련된 arguments 값으로 대체.
  
  
  Appender클래스
  
  Consoleappender : 콘솔에 로그 메시지를 출력
  FileAppender : 파일에 로그 메시지 출력
  RollingFileAppender : 파일 크기가 일정 기준을 넘으면 기존 파일을 백업파일로 바꾸고 처음 부터 다시 기록
  //DailyRollingAppender : 설정한 기간 단위로 새 파일을 만들어 로그 메시지를 기록
  
  
  PatternLayout 클래스
  
  %p: debug, info, error, fatal 등 ㄹ그 레벨 이름 출력
  %m : 로그 메시지 출력
  %d : 로깅 이벤트 발생 시각 출력
  %F : 로깅이 발생한 프로그램 파일 이름 출력
  %l : 로깅이 발생한 caller의 정보 출력
  %L : 로깅이 발생한 caller의 라인 수 출력
  %M : 로깅이 발생한 caller의 method이름 출력
  %c : 로깅메시지 앞에 전체 패키지 이름이나 전체 파일이름 출력
  
  
  log4j 로그 레벨
  
  FATAL: 시스템 차원세 심각한 문제 발생해 애플리케이션 작동이 부가능할 경우에 해당하는 레벨
  ERROR: 실행 중 문제가 발생한 상태
  WARN: 경고 메시지 - 향후 시스템 오류의 원이 될 수 있는 경우
  INFO: 로그인, 상태 변경과 같은 실제 애플리케이션 운영과 관련된 정보 메시지 표시
  DEVUG: 개발시 디버깅 용도 사용하는 메시지
  TRACE: DEBUG 레벨보다 상세한 로깅 정보를 출력하기 위한 도입된 레벨
  
   -->



