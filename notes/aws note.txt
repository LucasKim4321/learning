# ssh myserver

# window의 경우
icacls "C:\javaStudy\kkk\mykey01.pem" /inheritance:r
icacls "C:\javaStudy\kkk\mykey01.pem" /grant:r "윈도우 사용자명:R"

# 공인 ip 확인 https://whatismyipaddress.com/
124.57.92.198/32

ec2서버 접속
ssh -i 저장한키페어경로 ubuntu@AWS에적힌내아이피
ssh -i C:\javaStudy\kkk\mykey01.pem ubuntu@52.79.160.254

# 접속해제
exit

# .ssh\config 설정
1. cmd에 cd ~\.ssh 입력
2. cmd에 notepad config 입력
3. config 메모장에 추가 다음 내용 추가
Host myserver 
    HostName AWS에적힌내아이피
    User ubuntu
    IdentityFile ~/Downloads/my-key.pem
4. config파일 새로 생성했으면 'config'라는 이름만 남기고 확장자 제거. 확장자 있을 시 인식 불가.
cmd에 Rename-Item -Path C:\Users\xowls\.ssh\config.txt -NewName config 입력 혹은 직접 제거
5. 설정 후 cmd에 ssh myserver 명령어로 간단하게 서버 접속 가능

# 핑 테스트 (안됨)
ping 52.79.160.254

# .ssh\config 확인
notepad ~\.ssh\config 혹은 notepad C:\Users\윈도우 사용자명\.ssh\config
혹은 cd ~\.ssh 명령어로 경로로 간 후 notepad config 입력

# 프로젝트를 빌드해서 .jar 혹은 .war 생성

# 프로젝트에 설치된 java버전 확인 후 해당 버전 서버에 설치

# 패키지 목록 업데이트:
sudo apt update

# OpenJDK 17 설치:
sudo apt install openjdk-17-jdk -y
서버 재부팅 필요. 엔터
재부팅 대상 packagekit.service , polkit.service  (기본 체크됨). 엔터 

# 설치 확인:
java -version

# 서버에 .jar 업로드
scp -i "your-key.pem" C:\my-projects\VisitBusan-0.0.1-SNAPSHOT.war ec2-user@<EC2-퍼블릭-IP>:~
scp -i "C:\javaStudy\kkk\mykey01.pem" "C:\javaStudy\Repositories\VisitBusan\VisitBusan\build\libs\VisitBusan-0.0.1-SNAPSHOT.war" ubuntu@52.79.160.254:~

# 업로드 확인
ls -l  혹은 ls

# 포트 포워딩 설정 방법
2-1. iptables로 포트 포워딩 설정
iptables 설치 확인

대부분의 리눅스 배포판에는 iptables가 기본적으로 설치되어 있습니다.
설치 여부 확인:
sudo iptables --version
설치되어 있지 않다면:
sudo apt update && sudo apt install iptables -y  # Ubuntu/Debian

# 포트 포워딩 명령 실행 아래 명령을 사용하여 80번 포트를 9089번 포트로 리다이렉트합니다:
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 9089

# 브라우저에서 http://<EC2-퍼블릭-IP>로 접속.
http://52.78.246.206:9089

유형	프로토콜	포트범위	소스		설명
SSH	TCP	22	<관리자 IP>/32	특정 관리자 IP만 SSH 접속 허용
HTTP	TCP	80	0.0.0.0/0	외부 사용자 웹사이트 접속 허용 (HTTP)
HTTPS	TCP	443	0.0.0.0/0	외부 사용자 웹사이트 접속 허용 (HTTPS)
사용자 지정 TCP	TCP	9089	<관리자 IP>/32	9089 포트를 특정 관리자만 사용 가능

# 방화벽(UFW) 상태 확인
sudo ufw status

# 방화벽(UFW) 설정 나중에 문제 될 수도?
sudo ufw allow 80
sudo ufw allow 443
sudo ufw allow from <관리자 IP> to any port 22
sudo ufw allow from 124.57.92.198/32 to any port 22

sudo ufw enable
sudo ufw disable

# 80포트로 접속시 9089포트로 redirect 규칙 설정
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 9089
# 규칙 확인
sudo iptables -t nat -L -n -v

# 설정 영구화 (iptables 설정은 기본적으로 서버를 재부팅하면 사라짐)
iptables-persistent 설치
sudo apt install iptables-persistent -y
# 설치 확인
dpkg -l | grep iptables-persistent

sudo netfilter-persistent save
sudo netfilter-persistent reload

# 서버 재부팅
sudo reboot

# 서버에 저장된 파일 삭제
ls 명령어로 목록을 불러와 파일명 확인
rm 파일명.확장자
# 삭제 후 재업로드
scp -i /path/to/key.pem 파일이름.war ubuntu@서버_IP:/경로/파일이_업로드될_위치/
scp -i "C:\javaStudy\kkk\mykey01.pem" "C:\javaStudy\Repositories\VisitBusan\VisitBusan\build\libs\VisitBusan-0.0.1-SNAPSHOT.war" ubuntu@52.79.160.254:~
# 그냥 삭제 안하고 같은 이름의 파일을 업로드 하면 덮어쓰기함


# SSH 접속을 끊어도 서버가 계속 돌게 하기
nohup java -jar JAR파일명.jar &
nohup java -jar VisitBusan-0.0.1-SNAPSHOT.war &
# 로그 확인
tail -f nohup.out

# 백그라운드에서 실행중인 프로세스 확인
ps -ef | grep VisitBusan-0.0.1-SNAPSHOT.war
# 포트확인
sudo ss -tuln | grep 9089

# 애플리케이션 종료

# 작업 번호 [1]을 사용해서 종료
kill %1
# 프로세스 ID로 종료
kill 1106
# 강제 종료
kill -9 1106
# 다시 확인
ps -ef | grep VisitBusan-0.0.1-SNAPSHOT.war
# 검색을 위한 grep프로세스만 실행중이라면 정상적으로 종료됨.


# Nginx를 이용한 경로 기반 리디렉션 설정

# Nginx 설치

Ubuntu 기준:
sudo apt update
sudo apt install nginx

# Nginx 설정 파일 수정

/etc/nginx/sites-available/default 파일을 열어 설정을 추가합니다:

sudo nano /etc/nginx/sites-available/default

nginx
# 코드 복사
server {
    listen 80;
    server_name 52.79.160.254;

    location /visitbusan {
        proxy_pass http://127.0.0.1:9089;  # 또는 http://52.79.160.254:9089;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        rewrite ^/visitbusan(.*) $1 break;  # 경로 리라이트
    }
}

# Nginx 재시작

# 설정 파일을 저장한 뒤 Nginx를 재시작합니다:
bash
코드 복사
sudo nginx -t  # 설정 확인
sudo systemctl restart nginx  or  sudo systemctl reload nginx
sudo service nginx restart

결과

http://52.79.160.254/visitbusan으로 접속하면 http://127.0.0.1:9089으로 프록시 요청이 전달됩니다.


# 기존의 iptables 규칙 삭제

bash
# 코드 복사
sudo iptables -t nat -D PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 9089

# 서버응답 확인
curl http://127.0.0.1:9089
포트 응답확인
sudo ss -tuln | grep 9089

ls /etc

# 사용자가 실행한 프로세스 목록
ps -u $(whoami)

# 사용자 권한 설정
chmod 711 /home/사용자명
chmod 711 /home/ubuntu
7 (소유자): 읽기(r), 쓰기(w), 실행(x).
1 (그룹): 실행(x)만 허용.
1 (기타): 실행(x)만 허용.
이 설정은 소유자는 디렉토리 내 파일을 읽고 쓰고 실행할 수 있지만, 다른 사용자는 디렉토리에 접근만 가능하도록 제한합니다.

server {

	listen 80;
	server_name 52.79.160.254;

	# URL 끝에 '/' 없을 경우 리디렉션
	location = /visitbusan {
		return 301 /visitbusan/;
	}

	location /visitbusan {
		proxy_pass http://127.0.0.1:9089;  # 내부적으로 포트 9089로 전달
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# 요청에서 /visitbusan 제거하여 백엔드로 전달 (필요없을 시 빼면됨)
		rewrite ^/visitbusan(/.*)? $1 break;
	}

	# 정적 파일 요청 처리 (/visitbusan을 제거하여 백엔드로 전달 할 경우 필요)
	location ~* \.(js|css|png|jpg|jpeg|gif|ico|woff|woff2|ttf|eot|svg)$ {
		proxy_pass http://127.0.0.1:9089;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
	}

}
client_max_body_size 50M;


# MariaDB 설치
sudo apt install mariadb-client -y

# AWS RDS의 MariaDB에 접속
mysql -h <endpoint> -P <port> -u <username> -p
mysql -h mydb01.cb4e22w4cn46.ap-northeast-2.rds.amazonaws.com -P 3306 -u root -p
-h: AWS RDS 엔드포인트 주소.
-P: MariaDB 포트(기본값: 3306).
-u: MariaDB 사용자 이름.
-p: 비밀번호 입력.

# DB문자셋 확인
SHOW VARIABLES LIKE 'character_set_database';

# 테이블 문자셋 확인
SHOW CREATE TABLE board\G

DEFAULT CHARSET=latin1: 한글과 같은 UTF-8 문자를 제대로 저장할 수 없음.

# DB문자셋 UTF8로 변경 
ALTER DATABASE visit_busan CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;

# 테이블 문자셋 UTF8로 변경
ALTER TABLE board CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

# 새로운 테이블 생성 시 기본 문자셋 설정
ALTER DATABASE visit_busan CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;

# 새로운 사용자 생성
CREATE USER '사용자이름'@'%' IDENTIFIED BY '비밀번호';

# 사용자 권한 변경
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, 
PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, 
LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, 
CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, 
TRIGGER ON *.* TO '사용자이름'@'%' WITH GRANT OPTION;

# 사용자 권한 확인
SHOW GRANTS for '사용자이름';


# 디렉토리 생성 지정된 경로가 없다면 디렉토리를 생성

mkdir -p /home/ubuntu/visitbusan/uploads
mkdir -p /home/ubuntu/myproject01/uploads
sudo chmod -R 775 /home/ubuntu/myproject01/uploads  소유자와 그룹에 대해 권한 설정
sudo chown ubuntu:ubuntu /home/ubuntu/myproject01/uploads

# 권한 설정 Spring Boot 애플리케이션이 해당 경로에 파일을 저장하려면 적절한 권한이 필요합니다:

sudo chmod -R 775 /home/ubuntu/visitbusan/uploads  소유자와 그룹에 대해 권한 설정
sudo chmod -R 777 /home/ubuntu/visitbusan/uploads  모든 사용자에 대해 권한 설정
sudo chown ubuntu:ubuntu /home/ubuntu/visitbusan/uploads

# 업로드 경로로 이동
cd /home/ubuntu/visitbusan/uploads

# 어거지로 업로드
scp -i "C:\javaStudy\kkk\mykey01.pem" "C:\home\ubuntu\visitbusan\uploads\s_493ba6ab-d486-4b76-92da-37a22d84c9a2==vb==ord-img5.jpg" ubuntu@52.79.160.254:/home/ubuntu/visitbusan/uploads

# 업로드 폴더 내 파일 전부 내컴퓨터로 복사
scp -i "key" -r ubuntu@<EC2_IP>:/home/ubuntu/visitbusan/uploads /path/to/local/directory
scp -i "C:\javaStudy\kkk\mykey01.pem" -r ubuntu@52.79.160.254:/home/ubuntu/visitbusan/uploads C:\home\ubuntu\visitbusan


# myproject01
scp -i "C:\javaStudy\kkk\mykey01.pem" "C:\javaStudy\Repositories\BoardTest\MyProject\build\libs\MyProject-0.0.1-SNAPSHOT.war" ubuntu@52.79.160.254:~
nohup java -jar MyProject-0.0.1-SNAPSHOT.war &
tail -f nohup.out
ps -ef | grep MyProject-0.0.1-SNAPSHOT.war




###################################
#            볼륨 확장             #
###################################

# AWS Console 에서 [EC2 대시보드] —[EBS] — [볼륨]
볼륨확장 (프리티어 30GB까지 무료)

# 볼륨 확인
lsblk

# 볼륨 파트 확장
sudo growpart /dev/xvda 1

# 사용률 확인
df -h

###################################
# SWAP 메모리 추가 (가상메모리 사용)  #
###################################

# 2GB 스왑 메모리 생성
sudo dd if=/dev/zero of=/swapMem bs=128M count=16
sudo dd if=/dev/zero of=/swapMem bs=1M count=2048   gpt 추천
메모리가 부족한 상태에서 128M 블록씩 메모리를 생성하면 실패 할 수 있다고 하고 1M가 가장 보편적인 설정이라함. gpt피셜. gpt

# 권한 부여
sudo chmod 600 /swapMem

# SWAP 메모리를 SWAP파일로 포맷
sudo mkswap /swapMem

# SWAP 메모리 활성화
sudo swapon /swapMem

# 활성화된 메모리의 정보를 출력합니다.
sudo swapon -s

# SWAP 메모리 자동 활성화

# 간단하게 추가
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

# vi로 추가
sudo vi /etc/fstab
I 눌러서 입력모드 전환
마지막 줄에 입력  /swapfile none swap sw 0 0
esc 눌러서 명령모드 전환
:wq 저장 후 종료
:q! 저장하지 않고 나가기

# nano로 추가
sudo nano /etc/fstab
마지막 줄에 입력  /swapfile none swap sw 0 0


# 메모리 삭제
sudo rm -r swapMem

# 메모리 비활성화
sudo swapoff swapMem

# 전체 메모리 비활성화
sudo swapoff -a

# 메모리 상태 확인
free -m