C:\Users\601\.m2\.lemminx-maven\org    maven 파일 위치
System.out.println('두번째 생성한 파일입니다.!!');  // 자바에서는'문자열' 안됨
System.out.println("두번째 생성한 파일입니다.!!");
기계어로 번역 -> 컴파일러, 인터프리터
컴파일러 중복 번역 안함 메모리차지 빨리실행,대형프로그램 c c++
인터프리터 중복 번역 대화형 바로바로 실행 네트워크 파이썬,자바스크립트
window,mac,linux 기계어끼리 호환안됨
자바 컴파일러면서 인터프리터 호환성+ 맞춤형 기계어 번역

1. 컴파일 언어 
컴파일 언어는 내가 작성한 소스 코드 전체를 컴퓨터가 알아먹을 수 있는 기계어로 번역한 뒤, 이 번역된 코드를 한번에 실행하는 두 단계를 거쳐 진행된다. 즉 번역과 실행이 완전히 따로 이루어진다는 뜻이다. 번역은 컴파일러를 통해 수행되고, 대표적인 예시로는 C, C++, Go 등이 있다.
 
 * 특징 *

1. 컴파일은 오래 걸릴 수 있다! 
 --- 힘겹게 만든 코드를 5시간에 거쳐 컴파일을 했다고 가정해보자! 그런데 변수 이름에 오타가 나서 에러가 발생했다면? 5시간동안 다시 컴파일 해야한다. ㅠ

2. 하지만 이미 컴파일이 된 프로그램이라면? 굉장히 빠른 속도로 실행이 가능하다.
 --- 이미 컴파일이 다 되어 있어서 실행만 하면 되기 때문에!

3. 운영체제 (OS) 이식성이 낮다.
 --- OS마다 실행할 수 있는 기계어가 다른 경우가 있다. 그럼 다른 OS에서 내 실행 파일을 실행시키려면? 이미 만들어둔 실행 파일은 불행히도 실행되지 않는다. 해당 OS에 맞는 컴파일러로 다시 컴파일 해줘야한다.


2. 인터프리터 언어
 
인터프리터 언어는 소스 코드를 한 줄씩, 번역과 실행을 동시에 진행한다. 번역은 인터프리터를 통해 수행되며, 대표적인 예시로는 Python, R, JavaScript 등이 있다.

 * 특징 *

1. 줄 단위로 번역과 실행을 하기 때문에 실행이 느리다.
 --- 다시 다 번역하고 실행해야 해서...

2. 디버깅이 쉽다! (개발의 편의성)
 --- 오류를 발견하면 해당 코드 밑으로는 번역 및 실행을 못하기 때문에 오류 발견이 쉽다.

3. 운영체제 이식성이 좋다.
 --- OS마다 호환되는 인터프리터만 준비되어 있다면 바로 실행이 가능하다!

노드 라이브러리
npmjs.com

자바 라이브러리
maven  gradle

해당하는 자바 버전이 없으면 자동으로 경로에 다운 받음
경로 C:\Users\601\.m2\repository\org

외부라이브러리를 불러오면 자동으로 다운
안되면 수동으로 업데이트
프로젝트 오른쪽클릭 maven -> update project

라이브러리 불러올때 라이브러리끼리 충돌일어나면 새로운 라이브러리의 버전을 낮춤

System.out.print("Hello~");    print줄바꿈 없는 문자열 출력
system.out.println("Java!!");   println 줄바꿈 있는 문자열 출력

Help -> eclipse marketplace  이클립스 마켓플레이스

delete하면 이클립스 상에서만 지움 실제파일 존재
실제파일까지 지우는 거 체크시 실제파일 삭제

라이브러리 불러오기 import

package 안만들고 class만들때 package같이 생성 가능

run한글 깨짐 -> 인코딩 run configurations ->  arguments -Dfile.encoding=MS949  또는 common x-windows-949

 ER다이어그램 (ERD)


long은 원시 타입(Primitive Type), Long은 참조 타입(Reference Type)이다
원시 타입은 정수, 실수, 문자, 논리 리터럴 등 실제 메모리에 데이터 값을 직접 저장하는 타입으로서
boolean, char, byte, short, int, long, float, double를 말한다.

 

참조 타입은 객체의 주소를 저장하는 타입으로 메모리 주소 값을 통해 객체를 참조하는 타입으로서

원시 타입을 제외한 문자열, 배열, enum, 클래스, 인터페이스를 말한다.

 

원시 타입(Primitive Type)은 null 할당이 불가능하다
원시 타입과 참조 타입의 가장 큰 차이점 중 하나는 원시 타입은 null로 지정이 불가능하지만, 참조 타입은 가능하다는 점이다.
하지만 원시 타입이라고 해서 null이 필요없는 것은 아니다.
그래서 원시 타입을 참조 타입으로 변환하는 Boxed Primitive Type인 래퍼 클래스(Wrapper Class)를 사용하게 된다.
래퍼 클래스도 클래스이기 때문에 참조 타입이다.

 

하지만 원시 타입(Primitive Type)은 성능이 좋다
원시 타입은 직접 값을 할당한다는 점에서 참조 타입에 비해 성능이 좋다는 장점이 있다.
원시 타입은 'Stack' 영역에 값이 존재하고, 참조 타입의 경우 'Stack' 영역에는 참조 주소 정보만 있고 실제 데이터는 'Heap' 영역에 존재한다.
즉, 값을 가져오는 데에는 원시 타입이 속도 상 빠르다.
추가로 메모리 측면에서도 원시 타입을 사용하는 것이 좋다.

 

 

도메인에서 id 값에 Long을 사용하는 이유는
도메인 영역의 id는 대체로 DB Table의 auto increment 값을 의미하는 경우가 많다.
즉, 데이터가 생성되는 시점에서 해당 값이 할당된다는 것이며, 도메인 객체의 id는 특정 시점에 존재할 수도 있고 존재하지 않을 수도 있다.
그렇기 때문에 long이 아닌 Long을 사용하며, 다만 이 변수가 not null 이 보장된다면 long을 사용하는 것이 더 좋다.

 

 

추가) 원시 타입과 참조 타입을 혼용해서 사용하지 말자
원시 타입을 참조 타입으로 변환하는 것을 Boxing, 참조 타입을 원시 타입으로 변환하는 것을 UnBoxing 이라고 한다.
자바에서는 이러한 변환을 명시적으로 선언하지 않아도 가능하도록 Auto Boxing과 Auto UnBoxing 기능을 제공한다.
하지만 이 경우 불필요한 객체 생성으로 인한 성능 저하를 일으킬 수 있다.

public class Sum {
    private static long sum() {
        Long sum = 0L;
        for (long i = 0; i <= Integer.MAX_VALUE; i++) {
            sum += i;
        }
        return sum;
    }
}
다음과 같은 코드에서 long으로 선언된 i 값이 Long으로 선언된 sum 변수와 연산을 하기 위해 Auto Boxing을 하게 되는데,

long을 Long으로 변환하는 과정에서 불필요한 Long 인스턴스가 생성된다.

long으로 선언했을 때와 비교하면 약 3배의 실행 속도 차이(Java11, M1 기준)를 확인 가능하다.

그러므로 최대한 원시 타입을 사용하며, 원시 타입과 참조 타입이 혼용되지 않도록 주의해야 한다.

 


