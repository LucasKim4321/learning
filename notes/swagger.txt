build.gradle에 셋팅

// springboot 3xx 이후 : springfox-swagger-ui: Rest API 테스트 라이브러리
implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
// spring-boot-starter-validation: 서버 유효성 검사 라이브러리
implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.2'



*SwaggerConfig*

package com.spring.MyProject.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

// 참고: https://velog.io/@gmlstjq123/SpringBoot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-Swagger-UI-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0
// springboot 3.xx 이후
// 1. JWT를 사용하지 않는 경우

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
                .components(new Components())
                .info(apiInfo());
    }

    private Info apiInfo() {
        return new Info()
                .title("API Test") // API의 제목
                .description("Let's practice Swagger UI") // API에 대한 설명
                .version("1.0.0"); // API의 버전
    }
}


//    2. JWT를 사용하는 경우

//    @Configuration
//    public class SwaggerConfig {
//        @Bean
//        public OpenAPI openAPI() {
//            String jwt = "JWT";
//            SecurityRequirement securityRequirement = new SecurityRequirement().addList(jwt);
//            Components components = new Components().addSecuritySchemes(jwt, new SecurityScheme()
//                    .name(jwt)
//                    .type(SecurityScheme.Type.HTTP)
//                    .scheme("bearer")
//                    .bearerFormat("JWT")
//            );
//            return new OpenAPI()
//                    .components(new Components())
//                    .info(apiInfo())
//                    .addSecurityItem(securityRequirement)
//                    .components(components);
//        }
//        private Info apiInfo() {
//            return new Info()
//                    .title("API Test") // API의 제목
//                    .description("Let's practice Swagger UI") // API에 대한 설명
//                    .version("1.0.0"); // API의 버전
//        }
//    }


*CustomServletConfig*

package com.spring.MyProject.config;


import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

// swagger 쓸 때 사용으로 설정
@Configuration
@EnableWebMvc  // resource위치를 따로 지정. 때문에 simple sidebar가 작동 안함
public class CustomServletConfig {
}




*SampleJSONController*

package com.spring.MyProject.controller;

import lombok.extern.log4j.Log4j2;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController  // controller + JSON구조 데이터 반환
@Log4j2
public class SampleJSONController {

    @GetMapping("/helloArr")
    public String[] helloArr() {
        log.info("RestConroller => helloArr => 배열구조 자료 반환(전송)...");

        return new String[] {"홍길동","홍길순","동길이"};

    }

}









